//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Include Library's //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <Servo.h>
Servo RunServo;       //Import Library as RunServo

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Defining Pinouts////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define PIN_SERVO 8             //Rename Pin 8 to PIN_SERVO

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Define Distance Class///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Defining Private Varibles///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class ServoActuator{
  private:
    byte Pin;
    float Angle;
    int Min;
    int Max;
    unsigned long NextTimeChange = 0;
    unsigned long OnTime;
    unsigned long CurrentTime;
    bool ServoOn = false;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Pass data into private varibles/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////         
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  

  public:
    ServoActuator(byte Pin, unsigned long OnTime, int Min, int Max){
      this->Pin=Pin;                    //Pass value for Pin to Private Class
      this->OnTime=OnTime;              //Pass value for OnTime to Private Class
      this->Min=Min;                    //Pass value for Min Distance to Private Class
      this->Max=Max;                    //Pass value for Max Distance to Private Class
   
      pinMode(Pin,OUTPUT);              //Set Pin as an Output
    }

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//SET ANGLE USING MAP FUNCTION////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    void setAngle(float PolyDistance){                                          //Maps distance from min to max to 0 to 180 degrees
        Angle = map(PolyDistance*1000, Min*1000, Max*1000, 0.00, 180.00);
    }

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Time Control for Smoothing and Sending Data/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    void CheckTime(){           
      CurrentTime = millis();                               //Checks time and stores as CurrentTime                           
      if(CurrentTime >= NextTimeChange){                    //If CurrentTime is less than NextTimeChange
        ServoOn = true;                                    //Set ServoOn = True
        NextTimeChange = NextTimeChange + OnTime;           //Increase NextTimeChange by OnTime 
      }
      else{
        ServoOn = false;                                   //Else set ServoOn = False      
      }  
    }
    
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//ACTUATE SERVO(0-180 DEGREES)////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////             
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    void ActuateServo(){
      CheckTime();                                        //Checks time and stores as CurrentTime 
      if(ServoOn){                                        //If CurrentTime is less than NextTimeChange                               
        if (Angle>=0.00 && Angle<=180.00){                //If the angle is between 0 and 180 degrees
          RunServo.attach(PIN_SERVO,470,2235);            //Sets soft limits on Servo Motor
          RunServo.write(Angle);                          //Motor Output to specified angle         
        }
      }               
    }
};
