//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Defining Pinouts////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define PIN_RELAY 2        //Rename Pin 2 to PIN_RELAY

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Define Relay Class///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Defining Private Varibles///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Relay {
  private:                                                                         
    byte pinRelay;
    boolean RelayState = LOW;
    float Setpoint;
    double kp = 1.2;
    double ki = 0;
    double kd = 0;   
    unsigned long currentTime, previousTime;
    double elapsedTime;
    double error;
    double lastError;
    double input, output, setPoint;
    double cumError, rateError;
    
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Pass data into private varibles/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////         
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  

  public:                                                                         // Passing data into private varibles
  
    Relay(byte pinRelay, float Setpoint) {
      this->pinRelay = pinRelay;
      this->Setpoint = Setpoint;
      pinMode(pinRelay, OUTPUT);                                                    // Declaring the PinMode to Output
    }

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//CALCULATE PID///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////             
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    
    double computePID(float Voltage){     
        currentTime = millis();                                 //get current time
        elapsedTime = (double)(currentTime - previousTime);     //compute time elapsed from previous computation   
        error = Setpoint - Voltage;                             // determine error
        cumError += error * elapsedTime;                        // compute integral
        rateError = (error - lastError)/elapsedTime;            // compute derivative
        double out = kp*error + ki*cumError + kd*rateError;     //PID output               
        Serial.println(out);
        lastError = error;                                      //remember current error
        previousTime = currentTime;                             //remember current time
        return out; 
    }
    
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//TURN ON OR OFF RELAY///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////             
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                                                                
    void check(double computePID) {
      if(computePID >= Setpoint) {                                              // If Reading is greaterthan or equal to the Setpoint do this
        RelayState = LOW;
      }
      else{                                                                     // If the Relay is OFF turn it ON
        RelayState = HIGH;
      }
      digitalWrite(pinRelay, RelayState);                                       //Change Relay State to the output stated
      }
};

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////             
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
